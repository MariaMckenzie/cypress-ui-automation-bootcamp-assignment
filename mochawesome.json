{
  "stats": {
    "suites": 5,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-07T01:29:30.971Z",
    "end": "2022-12-07T01:30:45.521Z",
    "duration": 47631,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0780c95a-360e-48e6-8105-abb8bf7f21f7",
      "title": "",
      "fullFile": "cypress\\e2e\\tests\\Checkout\\checkout.cy.js",
      "file": "cypress\\e2e\\tests\\Checkout\\checkout.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "416a5b5c-179e-4db9-a055-d250faa6e0b0",
          "title": "Checkout Flow",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should complete a checkout flow with one item",
              "fullTitle": "Checkout Flow should complete a checkout flow with one item",
              "timedOut": null,
              "duration": 2804,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// variables\nlet itemInfo = [_products.item1.no, _products.item1.name, _products.item1.price]; // login with a valid user\n_login.default.login(_login2.standardUser.username, _login2.standardUser.password); // assert that the user logs in successfully and can see the inventory page, inventory items and cart button\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/inventory.html\");\ncy.get(_inventory.default.getItemInformation(_products.item1.no)).should(\"be.visible\"); //first item\ncy.get(_inventory.default.getItemName(_products.item1.no)).should(\"have.text\", _products.item1.name);\ncy.get(_inventory.default.getItemInformation(_products.item2.no)).should(\"be.visible\"); //second item\ncy.get(_inventory.default.getItemName(_products.item2.no)).should(\"have.text\", _products.item2.name);\ncy.get(_inventory.default.cartButton).should(\"be.visible\"); // add first item to the cart\n_inventory.default.addToCart(itemInfo[0]); // assert that the item is added to the cart\n\ncy.get(_inventory.default.cartBadge).should(\"be.visible\");\ncy.get(_inventory.default.cartBadge).should(\"have.text\", \"1\"); // should go to cart\ncy.get(\".shopping_cart_link\").click();\ncy.url().should(\"eq\", \"https://www.saucedemo.com/cart.html\"); // assert that the item is in the cart\ncy.get(_cart.default.title).should(\"have.text\", \"Your Cart\");\ncy.get(_cart.default.getItemInformation(itemInfo[0])).should(\"exist\");\ncy.get(_cart.default.getItemName(itemInfo[0])).should(\"have.text\", itemInfo[1]);\ncy.get(_cart.default.getItemPrice(itemInfo[0])).should(\"have.text\", `$${itemInfo[2].toString()}`); // should checkout successfully\n_cart.default.checkout(); // assert that the user moves on to the first step of checkout page\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-step-one.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Your Information\");\ncy.get(_checkout.default.firstnameInput).should(\"be.visible\");\ncy.get(_checkout.default.lastnameInput).should(\"be.visible\");\ncy.get(_checkout.default.continueButton).should(\"be.visible\"); // continue to step two\n_checkout.default.continueToStepTwo(_users.user1.firstname, _users.user1.lastname, _users.user1.postal); // assert that the user is at step two\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-step-two.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Overview\"); // assert that the item selected is the same in checkout and the subtotal is correct\ncy.get(_checkout.default.checkCartItemName(1)).should(\"have.text\", itemInfo[1]);\ncy.get(_checkout.default.checkCartItemPrice(1)).should(\"have.text\", `$${itemInfo[2]}`);\ncy.get(_checkout.default.subtotal).should(\"have.text\", `Item total: $${itemInfo[2]}`); //confirm total cost of items before tax\n// complete checkout\n_checkout.default.completeStepTwo(); // assert that checkout is complete\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-complete.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Complete!\");\ncy.get(_checkout.default.thankyouTitle).should(\"have.text\", \"THANK YOU FOR YOUR ORDER\");\ncy.get(_checkout.default.thankyouText).should(\"have.text\", \"Your order has been dispatched, and will arrive just as fast as the pony can get there!\");\ncy.get(_checkout.default.backButton).should(\"be.visible\"); // log out user\n_inventory.default.logout(); // assert that the user is logged out\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "688a72d8-4a03-4a0f-87e7-3430f61b2fb3",
              "parentUUID": "416a5b5c-179e-4db9-a055-d250faa6e0b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should complete a checkout flow with one item (from the product page)",
              "fullTitle": "Checkout Flow should complete a checkout flow with one item (from the product page)",
              "timedOut": null,
              "duration": 2964,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// variables\nlet itemInfo = [_products.item1.no, _products.item1.name, _products.item1.price]; // login with a valid user\n_login.default.login(_login2.standardUser.username, _login2.standardUser.password); // assert that the user logs in successfully and can see the inventory page, inventory items and cart button\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/inventory.html\");\ncy.get(_inventory.default.getItemInformation(_products.item1.no)).should(\"be.visible\"); //first item\ncy.get(_inventory.default.getItemName(_products.item1.no)).should(\"have.text\", _products.item1.name);\ncy.get(_inventory.default.getItemInformation(_products.item2.no)).should(\"be.visible\"); //second item\ncy.get(_inventory.default.getItemName(_products.item2.no)).should(\"have.text\", _products.item2.name);\ncy.get(_inventory.default.cartButton).should(\"be.visible\"); // go to product page\n_inventory.default.goToProductPage(itemInfo[0]); // assert that the user is redirected to the product page\n\ncy.url().should(\"contain\", \"https://www.saucedemo.com/inventory-item\");\n_product.default.addToCart(); // assert that the item is added to the cart\n\ncy.get(_inventory.default.cartBadge).should(\"be.visible\");\ncy.get(_inventory.default.cartBadge).should(\"have.text\", \"1\"); // should go to cart\ncy.get(\".shopping_cart_link\").click();\ncy.url().should(\"eq\", \"https://www.saucedemo.com/cart.html\"); // assert that the item is in the cart\ncy.get(_cart.default.title).should(\"have.text\", \"Your Cart\");\ncy.get(_cart.default.getItemInformation(_products.item1.no)).should(\"exist\");\ncy.get(_cart.default.getItemName(_products.item1.no)).should(\"have.text\", itemInfo[1]);\ncy.get(_cart.default.getItemPrice(_products.item1.no)).should(\"have.text\", `$${itemInfo[2].toString()}`); // should checkout successfully\n_cart.default.checkout(); // assert that the user moves on to the first step of checkout page\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-step-one.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Your Information\");\ncy.get(_checkout.default.firstnameInput).should(\"be.visible\");\ncy.get(_checkout.default.lastnameInput).should(\"be.visible\");\ncy.get(_checkout.default.continueButton).should(\"be.visible\"); // continue to step two\n_checkout.default.continueToStepTwo(_users.user1.firstname, _users.user1.lastname, _users.user1.postal); // assert that the user is at step two\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-step-two.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Overview\"); // assert that the item selected is the same in checkout and the subtotal is correct\ncy.get(_checkout.default.checkCartItemName(1)).should(\"have.text\", itemInfo[1]);\ncy.get(_checkout.default.checkCartItemPrice(1)).should(\"have.text\", `$${itemInfo[2]}`);\ncy.get(_checkout.default.subtotal).should(\"have.text\", `Item total: $${itemInfo[2]}`); //confirm total cost of items before tax\n// complete checkout\n_checkout.default.completeStepTwo(); // assert that checkout is complete\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-complete.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Complete!\");\ncy.get(_checkout.default.thankyouTitle).should(\"have.text\", \"THANK YOU FOR YOUR ORDER\");\ncy.get(_checkout.default.thankyouText).should(\"have.text\", \"Your order has been dispatched, and will arrive just as fast as the pony can get there!\");\ncy.get(_checkout.default.backButton).should(\"be.visible\"); // log out user\n_inventory.default.logout(); // assert that the user is logged out\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "489f73a9-4f5b-47f7-8d10-c8d14fa8deb1",
              "parentUUID": "416a5b5c-179e-4db9-a055-d250faa6e0b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should complete a checkout flow with multiple items",
              "fullTitle": "Checkout Flow should complete a checkout flow with multiple items",
              "timedOut": null,
              "duration": 2790,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// variables\nlet itemInfo = [[_products.item3.no, _products.item3.name, _products.item3.price], [_products.item4.no, _products.item4.name, _products.item4.price], [_products.item5.no, _products.item5.name, _products.item5.price]],\n    total = itemInfo[0][2] + itemInfo[1][2] + itemInfo[2][2]; // login with a valid user\n_login.default.login(_login2.standardUser.username, _login2.standardUser.password); // assert that the user logs in successfully and can see the inventory page, inventory items and cart button\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/inventory.html\");\ncy.get(_inventory.default.getItemInformation(_products.item1.no)).should(\"be.visible\"); //first item\ncy.get(_inventory.default.getItemName(_products.item1.no)).should(\"have.text\", _products.item1.name);\ncy.get(_inventory.default.getItemInformation(_products.item4.no)).should(\"be.visible\"); //second item\ncy.get(_inventory.default.getItemName(_products.item4.no)).should(\"have.text\", _products.item4.name);\ncy.get(_inventory.default.cartButton).should(\"be.visible\"); // add some items to the cart\n_inventory.default.addToCart(itemInfo[0][0]);\n_inventory.default.addToCart(itemInfo[1][0]);\n_inventory.default.addToCart(itemInfo[2][0]); // assert that the items are added to the cart\n\ncy.get(_inventory.default.cartBadge).should(\"be.visible\");\ncy.get(_inventory.default.cartBadge).should(\"have.text\", \"3\"); // should go to cart\ncy.get(\".shopping_cart_link\").click();\ncy.url().should(\"eq\", \"https://www.saucedemo.com/cart.html\"); // assert that the items are in the cart\ncy.get(_cart.default.title).should(\"have.text\", \"Your Cart\");\ncy.get(_cart.default.getItemInformation(1)).should(\"exist\");\ncy.get(_cart.default.getItemName(1)).should(\"have.text\", itemInfo[0][1]);\ncy.get(_cart.default.getItemPrice(1)).should(\"have.text\", `$${itemInfo[0][2].toString()}`);\ncy.get(_cart.default.getItemInformation(2)).should(\"exist\");\ncy.get(_cart.default.getItemName(2)).should(\"have.text\", itemInfo[1][1]);\ncy.get(_cart.default.getItemPrice(2)).should(\"have.text\", `$${itemInfo[1][2].toString()}`);\ncy.get(_cart.default.getItemInformation(3)).should(\"exist\");\ncy.get(_cart.default.getItemName(3)).should(\"have.text\", itemInfo[2][1]);\ncy.get(_cart.default.getItemPrice(3)).should(\"have.text\", `$${itemInfo[2][2].toString()}`); // should checkout successfully\n_cart.default.checkout(); // assert that the user moves on to the first step of checkout page\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-step-one.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Your Information\");\ncy.get(_checkout.default.firstnameInput).should(\"be.visible\");\ncy.get(_checkout.default.lastnameInput).should(\"be.visible\");\ncy.get(_checkout.default.continueButton).should(\"be.visible\"); // continue to step two\n_checkout.default.continueToStepTwo(_users.user1.firstname, _users.user1.lastname, _users.user1.postal); // assert that the user is at step two\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-step-two.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Overview\"); // assert that the items selected are the same in checkout and the subtotal is correct\ncy.get(_checkout.default.checkCartItemName(1)).should(\"have.text\", itemInfo[0][1]);\ncy.get(_checkout.default.checkCartItemPrice(1)).should(\"have.text\", `$${itemInfo[0][2]}`);\ncy.get(_checkout.default.checkCartItemName(2)).should(\"have.text\", itemInfo[1][1]);\ncy.get(_checkout.default.checkCartItemPrice(2)).should(\"have.text\", `$${itemInfo[1][2]}`);\ncy.get(_checkout.default.checkCartItemName(3)).should(\"have.text\", itemInfo[2][1]);\ncy.get(_checkout.default.checkCartItemPrice(3)).should(\"have.text\", `$${itemInfo[2][2]}`);\ncy.get(_checkout.default.subtotal).should(\"have.text\", `Item total: $${total}`); //confirm total cost of items before tax\n// complete checkout\n_checkout.default.completeStepTwo(); // assert that checkout is complete\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-complete.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Complete!\");\ncy.get(_checkout.default.thankyouTitle).should(\"have.text\", \"THANK YOU FOR YOUR ORDER\");\ncy.get(_checkout.default.thankyouText).should(\"have.text\", \"Your order has been dispatched, and will arrive just as fast as the pony can get there!\");\ncy.get(_checkout.default.backButton).should(\"be.visible\"); // log out user\n_inventory.default.logout(); // assert that the user is logged out\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "a08f2e4e-0ecc-4627-bbdc-abb91579c31d",
              "parentUUID": "416a5b5c-179e-4db9-a055-d250faa6e0b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should complete a checkout flow with multiple items (from product page)",
              "fullTitle": "Checkout Flow should complete a checkout flow with multiple items (from product page)",
              "timedOut": null,
              "duration": 3240,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// variables\nlet itemInfo = [[_products.item3.no, _products.item3.name, _products.item3.price], [_products.item6.no, _products.item6.name, _products.item6.price]],\n    total = itemInfo[0][2] + itemInfo[1][2]; // login with a valid user\n_login.default.login(_login2.standardUser.username, _login2.standardUser.password); // assert that the user logs in successfully and can see the inventory page, inventory items and cart button\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/inventory.html\");\ncy.get(_inventory.default.getItemInformation(_products.item1.no)).should(\"be.visible\"); //first item\ncy.get(_inventory.default.getItemName(_products.item1.no)).should(\"have.text\", _products.item1.name);\ncy.get(_inventory.default.getItemInformation(_products.item4.no)).should(\"be.visible\"); //second item\ncy.get(_inventory.default.getItemName(_products.item4.no)).should(\"have.text\", _products.item4.name);\ncy.get(_inventory.default.cartButton).should(\"be.visible\"); // go to product page (item 1)\n_inventory.default.goToProductPage(itemInfo[0][0]); // assert that the user is redirected to the product page\n\ncy.url().should(\"contain\", \"https://www.saucedemo.com/inventory-item\");\n_product.default.addToCart(); // go back to inventory page\n\n_product.default.goToInventory(); // go to product page (item 2)\n\n_inventory.default.goToProductPage(itemInfo[1][0]); // assert that the user is redirected to the product page\n\ncy.url().should(\"contain\", \"https://www.saucedemo.com/inventory-item\");\n_product.default.addToCart(); // assert that the items are added to the cart\n\ncy.get(_inventory.default.cartBadge).should(\"be.visible\");\ncy.get(_inventory.default.cartBadge).should(\"have.text\", \"2\"); // should go to cart\ncy.get(\".shopping_cart_link\").click();\ncy.url().should(\"eq\", \"https://www.saucedemo.com/cart.html\"); // assert that the items are in the cart\ncy.get(_cart.default.title).should(\"have.text\", \"Your Cart\");\ncy.get(_cart.default.getItemInformation(1)).should(\"exist\");\ncy.get(_cart.default.getItemName(1)).should(\"have.text\", itemInfo[0][1]);\ncy.get(_cart.default.getItemPrice(1)).should(\"have.text\", `$${itemInfo[0][2].toString()}`);\ncy.get(_cart.default.getItemInformation(2)).should(\"exist\");\ncy.get(_cart.default.getItemName(2)).should(\"have.text\", itemInfo[1][1]);\ncy.get(_cart.default.getItemPrice(2)).should(\"have.text\", `$${itemInfo[1][2].toString()}`); // should checkout successfully\n_cart.default.checkout(); // assert that the user moves on to the first step of checkout page\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-step-one.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Your Information\");\ncy.get(_checkout.default.firstnameInput).should(\"be.visible\");\ncy.get(_checkout.default.lastnameInput).should(\"be.visible\");\ncy.get(_checkout.default.continueButton).should(\"be.visible\"); // continue to step two\n_checkout.default.continueToStepTwo(_users.user1.firstname, _users.user1.lastname, _users.user1.postal); // assert that the user is at step two\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-step-two.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Overview\"); // assert that the items selected are the same in checkout and the subtotal is correct\ncy.get(_checkout.default.checkCartItemName(1)).should(\"have.text\", itemInfo[0][1]);\ncy.get(_checkout.default.checkCartItemPrice(1)).should(\"have.text\", `$${itemInfo[0][2]}`);\ncy.get(_checkout.default.checkCartItemName(2)).should(\"have.text\", itemInfo[1][1]);\ncy.get(_checkout.default.checkCartItemPrice(2)).should(\"have.text\", `$${itemInfo[1][2]}`);\ncy.get(_checkout.default.subtotal).should(\"have.text\", `Item total: $${total}`); //confirm total cost of items before tax\n// complete checkout\n_checkout.default.completeStepTwo(); // assert that checkout is complete\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-complete.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Complete!\");\ncy.get(_checkout.default.thankyouTitle).should(\"have.text\", \"THANK YOU FOR YOUR ORDER\");\ncy.get(_checkout.default.thankyouText).should(\"have.text\", \"Your order has been dispatched, and will arrive just as fast as the pony can get there!\");\ncy.get(_checkout.default.backButton).should(\"be.visible\"); // log out user\n_inventory.default.logout(); // assert that the user is logged out\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "6d66cac3-2fbf-4091-8bae-3e7bab49c97c",
              "parentUUID": "416a5b5c-179e-4db9-a055-d250faa6e0b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not complete a checkout flow without completing the shipping form",
              "fullTitle": "Checkout Flow should not complete a checkout flow without completing the shipping form",
              "timedOut": null,
              "duration": 5102,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// variables\nlet itemInfo = [[_products.item3.no, _products.item3.name, _products.item3.price], [_products.item6.no, _products.item6.name, _products.item6.price]],\n    total = itemInfo[0][2] + itemInfo[1][2]; // login with a valid user\n_login.default.login(_login2.standardUser.username, _login2.standardUser.password); // assert that the user logs in successfully and can see the inventory page, inventory items and cart button\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/inventory.html\");\ncy.get(_inventory.default.getItemInformation(_products.item1.no)).should(\"be.visible\"); //first item\ncy.get(_inventory.default.getItemName(_products.item1.no)).should(\"have.text\", _products.item1.name);\ncy.get(_inventory.default.getItemInformation(_products.item4.no)).should(\"be.visible\"); //second item\ncy.get(_inventory.default.getItemName(_products.item4.no)).should(\"have.text\", _products.item4.name);\ncy.get(_inventory.default.cartButton).should(\"be.visible\"); // go to product page (item 1)\n_inventory.default.goToProductPage(itemInfo[0][0]); // assert that the user is redirected to the product page\n\ncy.url().should(\"contain\", \"https://www.saucedemo.com/inventory-item\");\n_product.default.addToCart(); // go back to inventory page\n\n_product.default.goToInventory(); // go to product page (item 2)\n\n_inventory.default.goToProductPage(itemInfo[1][0]); // assert that the user is redirected to the product page\n\ncy.url().should(\"contain\", \"https://www.saucedemo.com/inventory-item\");\n_product.default.addToCart(); // assert that the items are added to the cart\n\ncy.get(_inventory.default.cartBadge).should(\"be.visible\");\ncy.get(_inventory.default.cartBadge).should(\"have.text\", \"2\"); // should go to cart\ncy.get(\".shopping_cart_link\").click();\ncy.url().should(\"eq\", \"https://www.saucedemo.com/cart.html\"); // assert that the items are in the cart\ncy.get(_cart.default.title).should(\"have.text\", \"Your Cart\");\ncy.get(_cart.default.getItemInformation(1)).should(\"exist\");\ncy.get(_cart.default.getItemName(1)).should(\"have.text\", itemInfo[0][1]);\ncy.get(_cart.default.getItemPrice(1)).should(\"have.text\", `$${itemInfo[0][2].toString()}`);\ncy.get(_cart.default.getItemInformation(2)).should(\"exist\");\ncy.get(_cart.default.getItemName(2)).should(\"have.text\", itemInfo[1][1]);\ncy.get(_cart.default.getItemPrice(2)).should(\"have.text\", `$${itemInfo[1][2].toString()}`); // should checkout successfully\n_cart.default.checkout(); // assert that the user moves on to the first step of checkout page\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/checkout-step-one.html\");\ncy.get(_checkout.default.title).should(\"have.text\", \"Checkout: Your Information\");\ncy.get(_checkout.default.firstnameInput).should(\"be.visible\");\ncy.get(_checkout.default.lastnameInput).should(\"be.visible\");\ncy.get(_checkout.default.continueButton).should(\"be.visible\"); // continue to step two and attempt to checkout with all data missing\n_checkout.default.continueToStepTwo(_users.user5.firstname, _users.user5.lastname, _users.user5.postal); // assert that the user cannot move on to step two\n\ncy.get(_checkout.default.errorMessage).should(\"contain\", _users.user5.errorMsg); // continue to step two and attempt to checkout with firstname missing\n_checkout.default.continueToStepTwo(_users.user2.firstname, _users.user2.lastname, _users.user2.postal); // assert that the user cannot move on to step two\n\ncy.get(_checkout.default.errorMessage).should(\"contain\", _users.user2.errorMsg); // clear form\n_checkout.default.clearForm(); // continue to step two and attempt to checkout with lastname missing\n\n_checkout.default.continueToStepTwo(_users.user3.firstname, _users.user3.lastname, _users.user3.postal); // assert that the user cannot move on to step two\n\ncy.get(_checkout.default.errorMessage).should(\"contain\", _users.user3.errorMsg); // clear form\n_checkout.default.clearForm(); // continue to step two and attempt to checkout with postalcode missing\n\n_checkout.default.continueToStepTwo(_users.user4.firstname, _users.user4.lastname, _users.user4.postal); // assert that the user cannot move on to step two\n\ncy.get(_checkout.default.errorMessage).should(\"contain\", _users.user4.errorMsg); // clear form\n_checkout.default.clearForm();",
              "err": {},
              "uuid": "f3279523-6d6a-489f-ad9a-6a9429bef0a2",
              "parentUUID": "416a5b5c-179e-4db9-a055-d250faa6e0b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "688a72d8-4a03-4a0f-87e7-3430f61b2fb3",
            "489f73a9-4f5b-47f7-8d10-c8d14fa8deb1",
            "a08f2e4e-0ecc-4627-bbdc-abb91579c31d",
            "6d66cac3-2fbf-4091-8bae-3e7bab49c97c",
            "f3279523-6d6a-489f-ad9a-6a9429bef0a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16900,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d50eac50-85fa-47cf-ae1c-404b38892a22",
      "title": "",
      "fullFile": "cypress\\e2e\\tests\\DataDrivenLogin\\login.cy.js",
      "file": "cypress\\e2e\\tests\\DataDrivenLogin\\login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "53ef8ecd-ebeb-43af-9850-d8d174b985d5",
          "title": "Data Driven Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Assert that the login page can facilitate login",
              "fullTitle": "Data Driven Login Assert that the login page can facilitate login",
              "timedOut": null,
              "duration": 401,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// assert that the user is on the correct page\ncy.url().should(\"eq\", \"https://www.saucedemo.com/\"); // assert that the input fields for login is visible\ncy.get(_login.default.usernameInput).should(\"be.visible\");\ncy.get(_login.default.passwordInput).should(\"be.visible\");\ncy.get(_login.default.loginButton).should(\"be.visible\");",
              "err": {},
              "uuid": "70a1561c-a8cb-49f0-a3df-1b624100d1a4",
              "parentUUID": "53ef8ecd-ebeb-43af-9850-d8d174b985d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Log in as a standard user (with valid credentials)",
              "fullTitle": "Data Driven Login Log in as a standard user (with valid credentials)",
              "timedOut": null,
              "duration": 1603,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// login with a valid user\n_login.default.login(_login2.standardUser.username, _login2.standardUser.password); // assert that the user logs in successfully and can see the inventory page, inventory items and cart button\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/inventory.html\");\ncy.get(_inventory.default.getItemInformation(_products.item1.no)).should(\"be.visible\"); //first item\ncy.get(_inventory.default.getItemName(_products.item1.no)).should(\"have.text\", _products.item1.name);\ncy.get(_inventory.default.cartButton).should(\"be.visible\"); // log out user\n_inventory.default.logout(); // assert that the user is logged out\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "d551d00c-0bb7-4ec1-b6d0-8cbc6e1e5fd1",
              "parentUUID": "53ef8ecd-ebeb-43af-9850-d8d174b985d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Log in as a locked out user",
              "fullTitle": "Data Driven Login Log in as a locked out user",
              "timedOut": null,
              "duration": 1054,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// attempt to log in\n_login.default.login(_login2.lockedOutUser.username, _login2.lockedOutUser.password);\ncy.get(_login.default.loginError).should(\"be.visible\");\ncy.get(_login.default.loginError).should(\"contain\", _login2.lockedOutUser.errorMsg); // assert that the user did not log in\ncy.url().should(\"not.eq\", \"https://www.saucedemo.com/inventory.html\");\ncy.get(_inventory.default.inventoryList).should(\"not.exist\");\ncy.get(_inventory.default.cartButton).should(\"not.exist\");",
              "err": {},
              "uuid": "8f5b4e78-eeaa-4dd1-a374-58f127930745",
              "parentUUID": "53ef8ecd-ebeb-43af-9850-d8d174b985d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Log in as a performance glitch user",
              "fullTitle": "Data Driven Login Log in as a performance glitch user",
              "timedOut": null,
              "duration": 6787,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// login with as a performance glitch user\n_login.default.login(_login2.performanceGlitchUser.username, _login2.performanceGlitchUser.password); // assert that the user logs in successfully and can see the inventory page, inventory items and cart button after a certain time\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/inventory.html\");\n/**\n * According to the saucedemo.com source code [view in Dev Tools > Sources > static > js > pages > inventory.jsx (lines 25-28)],\n * for a performance glitch user the page should be visible after 5 seconds. The code snippet is as follows:\n *      // istanbul ignore next\n        if (isPerformanceGlitchUser()) {\n             startPerformanceGlitch(5000);\n        }\n */\ncy.get(_inventory.default.inventoryList, {\n  timeout: 5000\n}).should('be.visible');\ncy.get(_inventory.default.getItemInformation(_products.item1.no)).should(\"be.visible\"); //first item\ncy.get(_inventory.default.getItemName(_products.item1.no)).should(\"have.text\", _products.item1.name);\ncy.get(_inventory.default.cartButton).should(\"be.visible\"); // log out user\n_inventory.default.logout(); // assert that the user is logged out\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "31156775-2216-45d6-b05d-ebe254e0c4c5",
              "parentUUID": "53ef8ecd-ebeb-43af-9850-d8d174b985d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Log in as a problem user",
              "fullTitle": "Data Driven Login Log in as a problem user",
              "timedOut": null,
              "duration": 1504,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// login as a problem user\n_login.default.login(_login2.problemUser.username, _login2.problemUser.password); // assert that the user logs in successfully and can see the inventory page, inventory items and cart button\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/inventory.html\");\n/**\n * According to the saucedemo.com source code [view in Dev Tools > Sources > static > js > pages > inventory.jsx], \n * nothing happens once a problem user logs in\n */\ncy.get(_inventory.default.getItemInformation(_products.item1.no)).should(\"be.visible\"); //first item\ncy.get(_inventory.default.getItemName(_products.item1.no)).should(\"have.text\", _products.item1.name);\ncy.get(_inventory.default.cartButton).should(\"be.visible\"); // log out user\n_inventory.default.logout(); // assert that the user is logged out\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "54e93564-61cb-4e93-929b-9314454f2d5a",
              "parentUUID": "53ef8ecd-ebeb-43af-9850-d8d174b985d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cannot log in when all form fields are empty",
              "fullTitle": "Data Driven Login Cannot log in when all form fields are empty",
              "timedOut": null,
              "duration": 418,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// attempt to log in\n_login.default.login(_login2.missingData.username, _login2.missingData.password);\ncy.get(_login.default.loginError).should(\"be.visible\");\ncy.get(_login.default.loginError).should(\"contain\", _login2.missingData.errorMsg); // assert that the user did not log in\ncy.url().should(\"not.eq\", \"https://www.saucedemo.com/inventory.html\");\ncy.get(_inventory.default.inventoryList).should(\"not.exist\");\ncy.get(_inventory.default.cartButton).should(\"not.exist\");",
              "err": {},
              "uuid": "15ad497d-aace-46f3-9457-3daabfb5a8ad",
              "parentUUID": "53ef8ecd-ebeb-43af-9850-d8d174b985d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cannot log in when username input field is empty",
              "fullTitle": "Data Driven Login Cannot log in when username input field is empty",
              "timedOut": null,
              "duration": 658,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// attempt to log in with missing username\n_login.default.login(_login2.missingUsername.username, _login2.missingUsername.password);\ncy.get(_login.default.loginError).should(\"be.visible\");\ncy.get(_login.default.loginError).should(\"contain\", _login2.missingUsername.errorMsg); // assert that the user did not log in\ncy.url().should(\"not.eq\", \"https://www.saucedemo.com/inventory.html\");\ncy.get(_inventory.default.inventoryList).should(\"not.exist\");\ncy.get(_inventory.default.cartButton).should(\"not.exist\");",
              "err": {},
              "uuid": "f73e7adb-e50f-438c-a7a8-5f5593755675",
              "parentUUID": "53ef8ecd-ebeb-43af-9850-d8d174b985d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cannot log in when password input field is empty",
              "fullTitle": "Data Driven Login Cannot log in when password input field is empty",
              "timedOut": null,
              "duration": 631,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// attempt to log in with missing password\n_login.default.login(_login2.missingPassword.username, _login2.missingPassword.password);\ncy.get(_login.default.loginError).should(\"be.visible\");\ncy.get(_login.default.loginError).should(\"contain\", _login2.missingPassword.errorMsg); // assert that the user did not log in\ncy.url().should(\"not.eq\", \"https://www.saucedemo.com/inventory.html\");\ncy.get(_inventory.default.inventoryList).should(\"not.exist\");\ncy.get(_inventory.default.cartButton).should(\"not.exist\");",
              "err": {},
              "uuid": "7b7da4d0-967a-442f-99a6-cd6dd02badda",
              "parentUUID": "53ef8ecd-ebeb-43af-9850-d8d174b985d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "70a1561c-a8cb-49f0-a3df-1b624100d1a4",
            "d551d00c-0bb7-4ec1-b6d0-8cbc6e1e5fd1",
            "8f5b4e78-eeaa-4dd1-a374-58f127930745",
            "31156775-2216-45d6-b05d-ebe254e0c4c5",
            "54e93564-61cb-4e93-929b-9314454f2d5a",
            "15ad497d-aace-46f3-9457-3daabfb5a8ad",
            "f73e7adb-e50f-438c-a7a8-5f5593755675",
            "7b7da4d0-967a-442f-99a6-cd6dd02badda"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13056,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "48820e24-0332-493e-9b38-6178d1228571",
      "title": "",
      "fullFile": "cypress\\e2e\\tests\\Sort\\sort1.cy.js",
      "file": "cypress\\e2e\\tests\\Sort\\sort1.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "17f72e5e-a798-4a01-9256-e405c0eedb6d",
          "title": "Sort as a standard user",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should sort by name in ascending order",
              "fullTitle": "Sort as a standard user Should sort by name in ascending order",
              "timedOut": null,
              "duration": 1399,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// sort by name in ascending order\ncy.get(_inventory.default.sortSelection).select(0);\nitemsLst.sort(function (a, b) {\n  return a[0].localeCompare(b[0]);\n}); // sort items list\n// assert that the items are sorted correctly - default sorting\ncy.get(_inventory.default.getItemName(1)).should(\"have.text\", itemsLst[0][0]);\ncy.get(_inventory.default.getItemName(2)).should(\"have.text\", itemsLst[1][0]);\ncy.get(_inventory.default.getItemName(3)).should(\"have.text\", itemsLst[2][0]);\ncy.get(_inventory.default.getItemName(4)).should(\"have.text\", itemsLst[3][0]);\ncy.get(_inventory.default.getItemName(5)).should(\"have.text\", itemsLst[4][0]);\ncy.get(_inventory.default.getItemName(6)).should(\"have.text\", itemsLst[5][0]);",
              "err": {},
              "uuid": "78f9bd1f-0177-4ae5-ae4e-501f6eb91bfa",
              "parentUUID": "17f72e5e-a798-4a01-9256-e405c0eedb6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should sort by name in descending order",
              "fullTitle": "Sort as a standard user Should sort by name in descending order",
              "timedOut": null,
              "duration": 1227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// sort by name in descending order\n_inventory.default.zaSort();\nitemsLst.sort(function (a, b) {\n  return b[0].localeCompare(a[0]);\n}); // sort items list\n// assert that the items are sorted correctly\ncy.get(_inventory.default.getItemName(1)).should(\"have.text\", itemsLst[0][0]);\ncy.get(_inventory.default.getItemName(2)).should(\"have.text\", itemsLst[1][0]);\ncy.get(_inventory.default.getItemName(3)).should(\"have.text\", itemsLst[2][0]);\ncy.get(_inventory.default.getItemName(4)).should(\"have.text\", itemsLst[3][0]);\ncy.get(_inventory.default.getItemName(5)).should(\"have.text\", itemsLst[4][0]);\ncy.get(_inventory.default.getItemName(6)).should(\"have.text\", itemsLst[5][0]);",
              "err": {},
              "uuid": "7b899f0a-b0c6-4105-bdbe-2fb09065e52e",
              "parentUUID": "17f72e5e-a798-4a01-9256-e405c0eedb6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should sort by price in ascending order",
              "fullTitle": "Sort as a standard user Should sort by price in ascending order",
              "timedOut": null,
              "duration": 1160,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// sort by price in ascending order\n_inventory.default.lohiSort();\nitemsLst.sort(function (a, b) {\n  if (a[1] === b[1]) {\n    return a[0].localeCompare(b[0]);\n  }\n  return a[1] - b[1];\n}); // sort items list\n// assert that the items are sorted correctly\ncy.get(_inventory.default.getItemName(1)).should(\"have.text\", itemsLst[0][0]);\ncy.get(_inventory.default.getItemName(2)).should(\"have.text\", itemsLst[1][0]);\ncy.get(_inventory.default.getItemName(3)).should(\"have.text\", itemsLst[2][0]);\ncy.get(_inventory.default.getItemName(4)).should(\"have.text\", itemsLst[3][0]);\ncy.get(_inventory.default.getItemName(5)).should(\"have.text\", itemsLst[4][0]);\ncy.get(_inventory.default.getItemName(6)).should(\"have.text\", itemsLst[5][0]);",
              "err": {},
              "uuid": "8102fc9f-9427-4b35-9ab5-cfe3fca767c7",
              "parentUUID": "17f72e5e-a798-4a01-9256-e405c0eedb6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should sort by price in descending order",
              "fullTitle": "Sort as a standard user Should sort by price in descending order",
              "timedOut": null,
              "duration": 1108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// sort by price in descending order\n_inventory.default.hiloSort();\nitemsLst.sort(function (a, b) {\n  if (a[1] === b[1]) {\n    return a[0].localeCompare(b[0]);\n  }\n  return b[1] - a[1];\n}); // sort items list\n// assert that the items are sorted correctly\ncy.get(_inventory.default.getItemName(1)).should(\"have.text\", itemsLst[0][0]);\ncy.get(_inventory.default.getItemName(2)).should(\"have.text\", itemsLst[1][0]);\ncy.get(_inventory.default.getItemName(3)).should(\"have.text\", itemsLst[2][0]);\ncy.get(_inventory.default.getItemName(4)).should(\"have.text\", itemsLst[3][0]);\ncy.get(_inventory.default.getItemName(5)).should(\"have.text\", itemsLst[4][0]);\ncy.get(_inventory.default.getItemName(6)).should(\"have.text\", itemsLst[5][0]);",
              "err": {},
              "uuid": "35f1c7f1-46f2-4226-9629-c8668047d890",
              "parentUUID": "17f72e5e-a798-4a01-9256-e405c0eedb6d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78f9bd1f-0177-4ae5-ae4e-501f6eb91bfa",
            "7b899f0a-b0c6-4105-bdbe-2fb09065e52e",
            "8102fc9f-9427-4b35-9ab5-cfe3fca767c7",
            "35f1c7f1-46f2-4226-9629-c8668047d890"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4894,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e0b1e79f-ec3a-4600-becf-3de05a38fa11",
      "title": "",
      "fullFile": "cypress\\e2e\\tests\\Sort\\sort2.cy.js",
      "file": "cypress\\e2e\\tests\\Sort\\sort2.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "29df9670-53cc-4fc6-8700-b6d125d3be69",
          "title": "Sort as a problem user",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should keep default sort by name in ascending order",
              "fullTitle": "Sort as a problem user Should keep default sort by name in ascending order",
              "timedOut": null,
              "duration": 1281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// sort by name in ascending order\ncy.get(_inventory.default.sortSelection).select(0);\nitemsLst.sort(function (a, b) {\n  return a[0].localeCompare(b[0]);\n}); // sort items list\n// assert that the items are not sorted - default sorting remains\ncy.get(_inventory.default.getItemName(1)).should(\"have.text\", itemsLst[0][0]);\ncy.get(_inventory.default.getItemName(3)).should(\"have.text\", itemsLst[2][0]);\ncy.get(_inventory.default.getItemName(6)).should(\"have.text\", itemsLst[5][0]);",
              "err": {},
              "uuid": "4a379117-e4a9-4b3b-b5ef-f7e63d48f650",
              "parentUUID": "29df9670-53cc-4fc6-8700-b6d125d3be69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not sort by name in descending order",
              "fullTitle": "Sort as a problem user Should not sort by name in descending order",
              "timedOut": null,
              "duration": 1221,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// sort by name in descending order\n_inventory.default.zaSort();\nitemsLst.sort(function (a, b) {\n  return b[0].localeCompare(a[0]);\n}); // sort items list\n// assert that the items are not sorted\ncy.get(_inventory.default.getItemName(1)).should(\"not.have.text\", itemsLst[0][0]);\ncy.get(_inventory.default.getItemName(3)).should(\"not.have.text\", itemsLst[2][0]);\ncy.get(_inventory.default.getItemName(6)).should(\"not.have.text\", itemsLst[5][0]);",
              "err": {},
              "uuid": "fca3b685-38b4-46eb-9035-35a416ecc09d",
              "parentUUID": "29df9670-53cc-4fc6-8700-b6d125d3be69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not sort by price in ascending order",
              "fullTitle": "Sort as a problem user Should not sort by price in ascending order",
              "timedOut": null,
              "duration": 1100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// sort by price in ascending order\n_inventory.default.lohiSort();\nitemsLst.sort(function (a, b) {\n  if (a[1] === b[1]) {\n    return a[0].localeCompare(b[0]);\n  }\n  return a[1] - b[1];\n}); // sort items list\n// assert that the items are not sorted\ncy.get(_inventory.default.getItemName(1)).should(\"not.have.text\", itemsLst[0][0]);\ncy.get(_inventory.default.getItemName(4)).should(\"not.have.text\", itemsLst[3][0]);\ncy.get(_inventory.default.getItemName(6)).should(\"not.have.text\", itemsLst[5][0]);",
              "err": {},
              "uuid": "77580e95-27b3-47c1-bf7f-ba8d64c62274",
              "parentUUID": "29df9670-53cc-4fc6-8700-b6d125d3be69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not sort by price in descending order",
              "fullTitle": "Sort as a problem user Should not sort by price in descending order",
              "timedOut": null,
              "duration": 1163,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// sort by price in descending order\n_inventory.default.hiloSort();\nitemsLst.sort(function (a, b) {\n  if (a[1] === b[1]) {\n    return a[0].localeCompare(b[0]);\n  }\n  return b[1] - a[1];\n}); // sort items list\n// assert that the items are not sorted\ncy.get(_inventory.default.getItemName(1)).should(\"not.have.text\", itemsLst[0][0]);\ncy.get(_inventory.default.getItemName(4)).should(\"not.have.text\", itemsLst[3][0]);\ncy.get(_inventory.default.getItemName(6)).should(\"not.have.text\", itemsLst[5][0]);",
              "err": {},
              "uuid": "4e7d2d89-5559-4126-b6c9-361624334939",
              "parentUUID": "29df9670-53cc-4fc6-8700-b6d125d3be69",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a379117-e4a9-4b3b-b5ef-f7e63d48f650",
            "fca3b685-38b4-46eb-9035-35a416ecc09d",
            "77580e95-27b3-47c1-bf7f-ba8d64c62274",
            "4e7d2d89-5559-4126-b6c9-361624334939"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4765,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "eab96bf8-dd89-47c4-a53c-545193d50324",
      "title": "",
      "fullFile": "cypress\\e2e\\tests\\Cart\\cart.cy.js",
      "file": "cypress\\e2e\\tests\\Cart\\cart.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5afc9745-8b48-4dc9-a118-f86931d62f13",
          "title": "Checkout Flow",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add and remove one item from cart for standard user",
              "fullTitle": "Checkout Flow should add and remove one item from cart for standard user",
              "timedOut": null,
              "duration": 4440,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add first item to the cart\n_inventory.default.addToCart(itemInfo[0]); // assert that the item is added to the cart\n\ncy.get(_inventory.default.cartBadge).should(\"be.visible\");\ncy.get(_inventory.default.cartBadge).should(\"have.text\", \"1\"); // should go to cart\ncy.get(\".shopping_cart_link\").click();\ncy.url().should(\"eq\", \"https://www.saucedemo.com/cart.html\"); // assert that the item is in the cart\ncy.get(_cart.default.title).should(\"have.text\", \"Your Cart\");\ncy.get(_cart.default.getItemInformation(itemInfo[0])).should(\"exist\");\ncy.get(_cart.default.getItemName(itemInfo[0])).should(\"have.text\", itemInfo[1]);\ncy.get(_cart.default.getItemPrice(itemInfo[0])).should(\"have.text\", `$${itemInfo[2].toString()}`); // remove from cart \n_cart.default.removeFromCart(1); // assert that the items are removed from the cart\n\ncy.get(_inventory.default.cartBadge).should(\"not.exist\");\ncy.get(_cart.default.cartList).should(\"not.exist\"); // log out user\n_inventory.default.logout(); // assert that the user is logged out\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "370d19d3-46d6-464e-b19d-79de44dd50cf",
              "parentUUID": "5afc9745-8b48-4dc9-a118-f86931d62f13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should complete a checkout flow with one item (from the product page) for standard user",
              "fullTitle": "Checkout Flow should complete a checkout flow with one item (from the product page) for standard user",
              "timedOut": null,
              "duration": 1801,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// go to product page\n_inventory.default.goToProductPage(itemInfo[0]); // assert that the user is redirected to the product page\n\ncy.url().should(\"contain\", \"https://www.saucedemo.com/inventory-item\");\n_product.default.addToCart(); // assert that the item is added to the cart\n\ncy.get(_inventory.default.cartBadge).should(\"be.visible\");\ncy.get(_inventory.default.cartBadge).should(\"have.text\", \"1\"); // remove from cart\n_product.default.removeFromCart(); // assert that the items are removed from the cart\n\ncy.get(\".shopping_cart_link\").click();\ncy.url().should(\"eq\", \"https://www.saucedemo.com/cart.html\"); // assert that the item is in the cart\ncy.get(_inventory.default.cartBadge).should(\"not.exist\"); // log out user\n_inventory.default.logout(); // assert that the user is logged out\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "b0cc5b01-cac1-4031-97ac-61bec1206895",
              "parentUUID": "5afc9745-8b48-4dc9-a118-f86931d62f13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should complete a checkout flow with one item (from the inventory page) for standard user",
              "fullTitle": "Checkout Flow should complete a checkout flow with one item (from the inventory page) for standard user",
              "timedOut": null,
              "duration": 1775,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add first item to the cart\n_inventory.default.addToCart(itemInfo[0]); // assert that the item is added to the cart\n\ncy.get(_inventory.default.cartBadge).should(\"be.visible\");\ncy.get(_inventory.default.cartBadge).should(\"have.text\", \"1\"); // remove item from cart\n_inventory.default.removeFromCart(itemInfo[0]); // assert that the items are removed from the cart\n\ncy.get(_inventory.default.cartBadge).should(\"not.exist\");\ncy.get(_cart.default.cartList).should(\"not.exist\"); // log out user\n_inventory.default.logout(); // assert that the user is logged out\n\ncy.url().should(\"eq\", \"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "1e045a5e-82d6-4e7d-b7ca-5a8bb4aa243b",
              "parentUUID": "5afc9745-8b48-4dc9-a118-f86931d62f13",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "370d19d3-46d6-464e-b19d-79de44dd50cf",
            "b0cc5b01-cac1-4031-97ac-61bec1206895",
            "1e045a5e-82d6-4e7d-b7ca-5a8bb4aa243b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8016,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}